<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Design on Kindnet</title><link>https://kindnet.es/docs/design/</link><description>Recent content in Design on Kindnet</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Fri, 17 Jan 2025 22:54:48 +0000</lastBuildDate><atom:link href="https://kindnet.es/docs/design/index.xml" rel="self" type="application/rss+xml"/><item><title>DNS cache</title><link>https://kindnet.es/docs/design/dnscache/</link><pubDate>Fri, 17 Jan 2025 22:54:48 +0000</pubDate><guid>https://kindnet.es/docs/design/dnscache/</guid><description>DNS cache DNS is crucial in Kubernetes for service discovery, it uses resolv.conf and search paths to enable service discovery. However, this setup can multiply DNS lookups, as the client need to iterate over the existing list of paths. In addition, if the application uses &amp;ldquo;Happy Eyeballs&amp;rdquo; it will duplicate the number of queries, since it will query for A and AAAA records for each request.
The consequences is that the large number of queries per request increases latency and can exhaust the conntrack table, causing traffic disruption.</description></item><item><title>CNI</title><link>https://kindnet.es/docs/design/cni/</link><pubDate>Thu, 26 Dec 2024 22:54:48 +0000</pubDate><guid>https://kindnet.es/docs/design/cni/</guid><description>CNI-kindnet Kubernetes container runtimes relies on the Container Network Interface (CNI) standard to manage Pod networking. While CNI provides a general framework for container networking, its full feature set isn&amp;rsquo;t necessary for Kubernetes environments. This presents an opportunity for optimization.
At its core, Kubernetes has two primary networking requirements for CNI:
IP Address Management (IPAM): Assign IP addresses to Pods. Interface Configuration: Create and configure network interfaces within Pods. Many CNI plugins, however, are designed for more complex scenarios beyond Kubernetes&amp;rsquo; needs.</description></item><item><title>Kindnet</title><link>https://kindnet.es/docs/design/kindnet/</link><pubDate>Thu, 26 Dec 2024 22:54:48 +0000</pubDate><guid>https://kindnet.es/docs/design/kindnet/</guid><description>Kindnet is a simple yet powerful Kubernetes Network Plugin designed for performance, scalability, and low resource consumption. It provides essential networking capabilities for Kubernetes Pods, including IP address management (IPAM), network policy enforcement, DNS caching, NAT64, and more.
Architecture Kindnet follows a node-centric architecture, with a dedicated agent running on each Kubernetes node. This agent is responsible for:
Pod Networking: Creating and configuring network interfaces for Pods. IPAM: Allocating and managing IP addresses for Pods.</description></item></channel></rss>