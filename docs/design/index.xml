<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Design on KindNet</title><link>https://aojea.github.io/kindnet/docs/design/</link><description>Recent content in Design on KindNet</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Thu, 26 Dec 2024 22:54:48 +0000</lastBuildDate><atom:link href="https://aojea.github.io/kindnet/docs/design/index.xml" rel="self" type="application/rss+xml"/><item><title>CNI</title><link>https://aojea.github.io/kindnet/docs/design/cni/</link><pubDate>Thu, 26 Dec 2024 22:54:48 +0000</pubDate><guid>https://aojea.github.io/kindnet/docs/design/cni/</guid><description>CNI-kindnet Kubernetes container runtimes relies on the Container Network Interface (CNI) standard to manage Pod networking. While CNI provides a general framework for container networking, its full feature set isn&amp;rsquo;t necessary for Kubernetes environments. This presents an opportunity for optimization.
At its core, Kubernetes has two primary networking requirements for CNI:
IP Address Management (IPAM): Assign IP addresses to Pods. Interface Configuration: Create and configure network interfaces within Pods. Many CNI plugins, however, are designed for more complex scenarios beyond Kubernetes&amp;rsquo; needs.</description></item></channel></rss>