/*
Copyright Antonio Ojea

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/aojea/kindnet/pkg/apis/config/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ConfigurationListLister helps list ConfigurationLists.
// All objects returned here must be treated as read-only.
type ConfigurationListLister interface {
	// List lists all ConfigurationLists in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ConfigurationList, err error)
	// ConfigurationLists returns an object that can list and get ConfigurationLists.
	ConfigurationLists(namespace string) ConfigurationListNamespaceLister
	ConfigurationListListerExpansion
}

// configurationListLister implements the ConfigurationListLister interface.
type configurationListLister struct {
	indexer cache.Indexer
}

// NewConfigurationListLister returns a new ConfigurationListLister.
func NewConfigurationListLister(indexer cache.Indexer) ConfigurationListLister {
	return &configurationListLister{indexer: indexer}
}

// List lists all ConfigurationLists in the indexer.
func (s *configurationListLister) List(selector labels.Selector) (ret []*v1alpha1.ConfigurationList, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ConfigurationList))
	})
	return ret, err
}

// ConfigurationLists returns an object that can list and get ConfigurationLists.
func (s *configurationListLister) ConfigurationLists(namespace string) ConfigurationListNamespaceLister {
	return configurationListNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ConfigurationListNamespaceLister helps list and get ConfigurationLists.
// All objects returned here must be treated as read-only.
type ConfigurationListNamespaceLister interface {
	// List lists all ConfigurationLists in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ConfigurationList, err error)
	// Get retrieves the ConfigurationList from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ConfigurationList, error)
	ConfigurationListNamespaceListerExpansion
}

// configurationListNamespaceLister implements the ConfigurationListNamespaceLister
// interface.
type configurationListNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ConfigurationLists in the indexer for a given namespace.
func (s configurationListNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ConfigurationList, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ConfigurationList))
	})
	return ret, err
}

// Get retrieves the ConfigurationList from the indexer for a given namespace and name.
func (s configurationListNamespaceLister) Get(name string) (*v1alpha1.ConfigurationList, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("configurationlist"), name)
	}
	return obj.(*v1alpha1.ConfigurationList), nil
}
